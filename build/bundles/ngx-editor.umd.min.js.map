{"version":3,"file":"ngx-editor.umd.min.js","sources":["~/ngx-editor/src/app/ngx-editor/common/utils/ngx-editor.utils.ts","~/ngx-editor/src/app/ngx-editor/common/services/command-executor.service.ts","~/ngx-editor/src/app/ngx-editor/common/services/message.service.ts","~/ngx-editor/src/app/ngx-editor/common/ngx-editor.defaults.ts","~/ngx-editor/src/app/ngx-editor/ngx-editor.component.ts","~/ngx-editor/src/app/ngx-editor/ngx-grippie/ngx-grippie.component.ts","~/ngx-editor/src/app/ngx-editor/ngx-editor-message/ngx-editor-message.component.ts","~/ngx-editor/src/app/ngx-editor/ngx-editor-toolbar/ngx-editor-toolbar.component.ts","~/ngx-editor/src/app/ngx-editor/ngx-editor.module.ts"],"sourcesContent":["\n/**\n * @param {?} value\n * @param {?} toolbar\n * @return {?}\n */\nexport function canEnableToolbarOptions(value: string, toolbar: any): boolean {\n\n    if (value) {\n\n        if (toolbar['length'] === 0) {\n            return true;\n        } else {\n\n            const /** @type {?} */ found = toolbar.filter(array => {\n                return array.indexOf(value) !== -1;\n            });\n\n            return found.length ? true : false;\n        }\n    } else {\n        return false;\n    }\n}\n/**\n * @param {?} value\n * @param {?} ngxEditorConfig\n * @param {?} input\n * @return {?}\n */\nexport function getEditorConfiguration(value, ngxEditorConfig, input): any {\n\n    for (const /** @type {?} */ i in ngxEditorConfig) {\n        if (i) {\n            if (input[i]) {\n                value[i] = input[i];\n            }\n            if (!value.hasOwnProperty(i)) {\n                value[i] = ngxEditorConfig[i];\n            }\n        }\n    }\n    return value;\n}\n/**\n * @param {?} resizer\n * @return {?}\n */\nexport function canResize(resizer: string): any {\n    if (resizer === 'basic') {\n        return 'vertical';\n    }\n    return false;\n}\n","import { Injectable } from '@angular/core';\nexport class CommandExecutorService {\n/**\n * @param {?} command\n * @return {?}\n */\nexecute(command: string): void {\n\n    if (command === 'enableObjectResizing') {\n      document.execCommand('enableObjectResizing', true, true);\n      return;\n    }\n\n    if (command === 'blockquote') {\n      document.execCommand('formatBlock', false, '<blockquote>');\n      return;\n    }\n\n    if (command === 'removeBlockquote') {\n      document.execCommand('formatBlock', false, 'div');\n      return;\n    }\n\n    if (command === 'link') {\n      this.createLink();\n      return;\n    }\n\n    if (command === 'image') {\n      this.insertImage();\n      return;\n    }\n\n    if (command.includes('foreColor')) {\n      const /** @type {?} */ color = command.split(':')[1];\n      document.execCommand('foreColor', false, color);\n      return;\n    }\n\n    document.execCommand(command, false, null);\n  }\n/**\n * @return {?}\n */\nprivate insertImage(): void {\n    const /** @type {?} */ imageURI = prompt('Enter Image URL', 'http://');\n    if (imageURI) {\n      const /** @type {?} */ inserted = document.execCommand('insertImage', false, imageURI);\n      if (!inserted) {\n        throw new Error('Invalid URL');\n      }\n    }\n    return;\n  }\n/**\n * @return {?}\n */\nprivate createLink(): void {\n    const /** @type {?} */ selection = document.getSelection();\n\n    if (selection.anchorNode.parentElement.tagName === 'A') {\n      const /** @type {?} */ linkURL = prompt('Enter URL', selection.anchorNode.parentElement.getAttribute('href'));\n      if (linkURL) {\n        document.execCommand('createLink', false, linkURL);\n      }\n    } else {\n      if (selection['type'] === 'None') {\n        throw new Error('No selection made');\n      } else {\n        const /** @type {?} */ linkURL = prompt('Enter URL', 'http://');\n        if (linkURL) {\n          document.execCommand('createLink', false, linkURL);\n        }\n      }\n    }\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CommandExecutorService_tsickle_Closure_declarations() {\n/** @type {?} */\nCommandExecutorService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommandExecutorService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\n\nconst /** @type {?} */ FIVE_SECONDS = 5000;\nexport class MessageService {\nprivate message: Subject<string> = new Subject();\nconstructor() { }\n/**\n * @return {?}\n */\ngetMessage(): Observable<string> {\n    return this.message.asObservable();\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nsendMessage(message: string): void {\n    this.message.next(message);\n    this.clearMessageIn(FIVE_SECONDS);\n    return;\n  }\n/**\n * @param {?} milliseconds\n * @return {?}\n */\nprivate clearMessageIn(milliseconds: number): void {\n    setTimeout(() => {\n      this.message.next(undefined);\n    }, milliseconds);\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MessageService_tsickle_Closure_declarations() {\n/** @type {?} */\nMessageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMessageService.ctorParameters;\n/** @type {?} */\nMessageService.prototype.message;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export const /** @type {?} */ ngxEditorConfig = {\n    editable: true,\n    spellcheck: true,\n    height: 'auto',\n    minHeight: '0',\n    width: 'auto',\n    minWidth: '0',\n    translate: 'yes',\n    placeholder: 'Enter text here...',\n    toolbar: [\n        ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript', 'foreColor'],\n        ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\n        ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\n        ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\n        ['link', 'unlink', 'image']\n    ]\n};\n","import {\n  Component, OnInit, Input, Output,\n  ViewChild, HostListener, ElementRef, EventEmitter,\n  Renderer2, forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { CommandExecutorService } from './common/services/command-executor.service';\nimport { MessageService } from './common/services/message.service';\n\nimport { ngxEditorConfig } from './common/ngx-editor.defaults';\nimport * as Utils from './common/utils/ngx-editor.utils';\nexport class NgxEditorComponent implements OnInit, ControlValueAccessor {\n\n   editable: boolean;\n   spellcheck: boolean;\n   placeholder: string;\n   translate: string;\n   height: string;\n   minHeight: string;\n   width: string;\n   minWidth: string;\n   toolbar: any;\n   resizer = 'stack';\n   config = ngxEditorConfig;\n   showToolbar = true;\n\n   textArea: any;\n\n  enableToolbar = false;\n  Utils = Utils;\nprivate lastViewModel: any = '';\nprivate onChange: (value: string) => void;\nprivate onTouched: () => void;\n/**\n * @param {?} _elementRef\n * @param {?} _messageService\n * @param {?} _commandExecutor\n * @param {?} _renderer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _messageService: MessageService,\nprivate _commandExecutor: CommandExecutorService,\nprivate _renderer: Renderer2) { }\n/**\n * @return {?}\n */\nonFocus(): void {\n    this.enableToolbar = true;\n    return;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonDocumentClick(event) {\n    this.enableToolbar = !!this._elementRef.nativeElement.contains(event.target);\n  }\n/**\n * @param {?} html\n * @return {?}\n */\nonContentChange(html): void {\n\n    if (typeof this.onChange === 'function') {\n      this.onChange(html);\n    }\n\n    return;\n  }\n/**\n * @return {?}\n */\nonBlur(): void {\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n\n    return;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nresizeTextArea(offsetY: number): void {\n    let /** @type {?} */ newHeight = parseInt(this.height, 10);\n    newHeight += offsetY;\n    this.height = newHeight + 'px';\n    this.textArea.nativeElement.style.height = this.height;\n    return;\n  }\n/**\n * @param {?} commandName\n * @return {?}\n */\nexecuteCommand(commandName: string): void {\n    try {\n      this._commandExecutor.execute(commandName);\n    } catch ( /** @type {?} */error) {\n      this._messageService.sendMessage(error.message);\n    }\n    return;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (value === undefined) {\n      return;\n    }\n\n    this.refreshView(value);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nrefreshView(value): void {\n    const /** @type {?} */ normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n    return;\n  }\n/**\n * @return {?}\n */\ngetCollectiveParams(): any {\n    return {\n      editable: this.editable,\n      spellcheck: this.spellcheck,\n      placeholder: this.placeholder,\n      translate: this.translate,\n      height: this.height,\n      minHeight: this.minHeight,\n      width: this.width,\n      minWidth: this.minWidth,\n      toolbar: this.toolbar\n    };\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // set configuartion\n    this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\n\n    this.height = this.height || this.textArea.nativeElement.offsetHeight;\n\n    this.executeCommand('enableObjectResizing');\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-editor',\n  template: `\n    <div class=\"ngx-editor\" id=\"ngxEditor\" [style.width]=\"config['width']\" [style.minWidth]=\"config['minWidth']\">\n\n      <app-ngx-editor-toolbar [config]=\"config\" [enableToolbar]=\"enableToolbar\" [showToolbar]=\"showToolbar\" (execute)=\"executeCommand($event)\"></app-ngx-editor-toolbar>\n\n      <!-- text area -->\n      <div class=\"ngx-editor-textarea\" [attr.contenteditable]=\"config['editable']\" [attr.placeholder]=\"config['placeholder']\" (input)=\"onContentChange($event.target.innerHTML)\"\n        [attr.translate]=\"config['translate']\" [attr.spellcheck]=\"config['spellcheck']\" [style.height]=\"config['height']\" [style.minHeight]=\"config['minHeight']\"\n        [style.resize]=\"Utils?.canResize(resizer)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" #ngxTextArea></div>\n\n      <app-ngx-editor-message></app-ngx-editor-message>\n\n      <app-ngx-grippie *ngIf=\"resizer === 'stack'\"></app-ngx-grippie>\n\n    </div>\n  `,\n  styles: [`\n    /*\n     * editor styles\n     */\n    .ngx-editor {\n      position: relative; }\n      .ngx-editor ::ng-deep [contenteditable=true]:empty:before {\n        content: attr(placeholder);\n        display: block;\n        color: #868e96;\n        opacity: 1; }\n      .ngx-editor .ngx-editor-textarea {\n        min-height: 5rem;\n        padding: 0.5rem 0.8rem 1rem 0.8rem;\n        border: 1px solid #ddd;\n        background-color: #fff;\n        overflow-x: hidden;\n        overflow-y: auto; }\n        .ngx-editor .ngx-editor-textarea:focus, .ngx-editor .ngx-editor-textarea.focus {\n          outline: 0; }\n        .ngx-editor .ngx-editor-textarea ::ng-deep blockquote {\n          margin-left: 1rem;\n          border-left: 0.2em solid #dfe2e5;\n          padding-left: 0.5rem; }\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxEditorComponent),\n      multi: true\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MessageService, },\n{type: CommandExecutorService, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'editable': [{ type: Input },],\n'spellcheck': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'translate': [{ type: Input },],\n'height': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'width': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'toolbar': [{ type: Input },],\n'resizer': [{ type: Input },],\n'config': [{ type: Input },],\n'showToolbar': [{ type: Input },],\n'textArea': [{ type: ViewChild, args: ['ngxTextArea', ] },],\n'onDocumentClick': [{ type: HostListener, args: ['document:click', ['$event'], ] },],\n};\n}\n\nfunction NgxEditorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorComponent.ctorParameters;\n/** @type {?} */\nNgxEditorComponent.propDecorators;\n/** @type {?} */\nNgxEditorComponent.prototype.editable;\n/** @type {?} */\nNgxEditorComponent.prototype.spellcheck;\n/** @type {?} */\nNgxEditorComponent.prototype.placeholder;\n/** @type {?} */\nNgxEditorComponent.prototype.translate;\n/** @type {?} */\nNgxEditorComponent.prototype.height;\n/** @type {?} */\nNgxEditorComponent.prototype.minHeight;\n/** @type {?} */\nNgxEditorComponent.prototype.width;\n/** @type {?} */\nNgxEditorComponent.prototype.minWidth;\n/** @type {?} */\nNgxEditorComponent.prototype.toolbar;\n/** @type {?} */\nNgxEditorComponent.prototype.resizer;\n/** @type {?} */\nNgxEditorComponent.prototype.config;\n/** @type {?} */\nNgxEditorComponent.prototype.showToolbar;\n/** @type {?} */\nNgxEditorComponent.prototype.textArea;\n/** @type {?} */\nNgxEditorComponent.prototype.enableToolbar;\n/** @type {?} */\nNgxEditorComponent.prototype.Utils;\n/** @type {?} */\nNgxEditorComponent.prototype.lastViewModel;\n/** @type {?} */\nNgxEditorComponent.prototype.onChange;\n/** @type {?} */\nNgxEditorComponent.prototype.onTouched;\n/** @type {?} */\nNgxEditorComponent.prototype._elementRef;\n/** @type {?} */\nNgxEditorComponent.prototype._messageService;\n/** @type {?} */\nNgxEditorComponent.prototype._commandExecutor;\n/** @type {?} */\nNgxEditorComponent.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, HostListener } from '@angular/core';\nimport { NgxEditorComponent } from '../ngx-editor.component';\nexport class NgxGrippieComponent {\n\n  height: number;\n  oldY = 0;\n  grabber = false;\n/**\n * @param {?} _editorComponent\n */\nconstructor(private _editorComponent: NgxEditorComponent) { }\n/**\n * @param {?} event\n * @return {?}\n */\nonMouseMove(event: MouseEvent) {\n\n    if (!this.grabber) {\n      return;\n    }\n\n    this._editorComponent.resizeTextArea(event.clientY - this.oldY);\n    this.oldY = event.clientY;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonMouseUp(event: MouseEvent) {\n    this.grabber = false;\n  }\n/**\n * @param {?} event\n * @param {?=} resizer\n * @return {?}\n */\nonResize(event: MouseEvent, resizer?: Function) {\n    this.grabber = true;\n    this.oldY = event.clientY;\n    event.preventDefault();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-grippie',\n  template: `\n    <div class=\"ngx-editor-grippie\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"isolation:isolate\" viewBox=\"651.6 235 26 5\"\n        width=\"26\" height=\"5\">\n        <g id=\"sprites\">\n          <path d=\" M 651.6 235 L 653.6 235 L 653.6 237 L 651.6 237 M 654.6 238 L 656.6 238 L 656.6 240 L 654.6 240 M 660.6 238 L 662.6 238 L 662.6 240 L 660.6 240 M 666.6 238 L 668.6 238 L 668.6 240 L 666.6 240 M 672.6 238 L 674.6 238 L 674.6 240 L 672.6 240 M 657.6 235 L 659.6 235 L 659.6 237 L 657.6 237 M 663.6 235 L 665.6 235 L 665.6 237 L 663.6 237 M 669.6 235 L 671.6 235 L 671.6 237 L 669.6 237 M 675.6 235 L 677.6 235 L 677.6 237 L 675.6 237\"\n            fill=\"rgb(147,153,159)\" />\n        </g>\n      </svg>\n    </div>\n  `,\n  styles: [`\n    .ngx-editor-grippie {\n      height: 9px;\n      background-color: #f1f1f1;\n      position: relative;\n      text-align: center;\n      cursor: s-resize;\n      border: 1px solid #ddd;\n      border-top: transparent; }\n      .ngx-editor-grippie svg {\n        position: absolute;\n        top: 1.5px;\n        width: 50%;\n        right: 25%; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgxEditorComponent, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onMouseMove': [{ type: HostListener, args: ['document:mousemove', ['$event'], ] },],\n'onMouseUp': [{ type: HostListener, args: ['document:mouseup', ['$event'], ] },],\n'onResize': [{ type: HostListener, args: ['mousedown', ['$event'], ] },],\n};\n}\n\nfunction NgxGrippieComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxGrippieComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxGrippieComponent.ctorParameters;\n/** @type {?} */\nNgxGrippieComponent.propDecorators;\n/** @type {?} */\nNgxGrippieComponent.prototype.height;\n/** @type {?} */\nNgxGrippieComponent.prototype.oldY;\n/** @type {?} */\nNgxGrippieComponent.prototype.grabber;\n/** @type {?} */\nNgxGrippieComponent.prototype._editorComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\n\nimport { MessageService } from '../common/services/message.service';\nexport class NgxEditorMessageComponent {\n\n  ngxMessage = '';\n/**\n * @param {?} _messageService\n */\nconstructor(private _messageService: MessageService) {\n    this._messageService.getMessage().subscribe((message: string) => this.ngxMessage = message);\n  }\n/**\n * @return {?}\n */\nclearMessage() {\n    this.ngxMessage = undefined;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-editor-message',\n  template: `\n    <div class=\"ngx-editor-message\" *ngIf=\"ngxMessage\" (dblclick)=\"clearMessage()\">\n      {{ ngxMessage }}\n    </div>\n  `,\n  styles: [`\n    .ngx-editor-message {\n      font-size: 80%;\n      background-color: #f1f1f1;\n      border: 1px solid #ddd;\n      border-top: transparent;\n      padding: 0 0.5rem;\n      padding-bottom: 0.1rem;\n      -webkit-transition: 0.5s ease-in;\n      transition: 0.5s ease-in; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageService, },\n];\n}\n\nfunction NgxEditorMessageComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorMessageComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorMessageComponent.ctorParameters;\n/** @type {?} */\nNgxEditorMessageComponent.prototype.ngxMessage;\n/** @type {?} */\nNgxEditorMessageComponent.prototype._messageService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Input, Output, EventEmitter, ViewChild, ElementRef} from '@angular/core';\nimport * as Utils from '../common/utils/ngx-editor.utils';\nexport class NgxEditorToolbarComponent {\n\n   config: any;\n   enableToolbar = false;\n   showToolbar = true;\n   execute: EventEmitter<string> = new EventEmitter<string>();\n   buttonClicked: EventEmitter<any> = new EventEmitter<any>();\n\n  \n  colorElement: ElementRef;\nconstructor() {\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncanEnableToolbarOptions(value): boolean {\n    return Utils.canEnableToolbarOptions(value, this.config['toolbar']);\n  }\n/**\n * @param {?} command\n * @return {?}\n */\ntriggerCommand(command: string): void {\n    if (command === 'foreColor') {\n      this.colorElement.nativeElement.click();\n      return;\n    }\n    this.execute.emit(command);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\ntriggerCommandColor($event: Event) {\n    this.execute.emit('foreColor:' + ( /** @type {?} */(($event.target as any))).value);\n  }\n/**\n * @return {?}\n */\nclickButton() {\n    this.buttonClicked.emit('test');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-editor-toolbar',\n  template: `\n    <div class=\"ngx-toolbar\" *ngIf=\"showToolbar\">\n      <input type=\"color\" style=\"width: 0; height: 0; position: absolute; opacity: 0;\" (input)=\"triggerCommandColor($event)\" #colorElement>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('foreColor')\" (click)=\"triggerCommand('foreColor')\"\n                title=\"Bold\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-tint\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('bold')\" (click)=\"triggerCommand('bold')\"\n          title=\"Bold\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-bold\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('italic')\" (click)=\"triggerCommand('italic')\"\n          title=\"Italic\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-italic\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('underline')\" (click)=\"triggerCommand('underline')\"\n          title=\"Underline\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-underline\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('strikeThrough')\" (click)=\"triggerCommand('strikeThrough')\"\n          title=\"Strikethrough\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-strikethrough\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('superscript')\" (click)=\"triggerCommand('superscript')\"\n          title=\"Superscript\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-superscript\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('subscript')\" (click)=\"triggerCommand('subscript')\"\n          title=\"Subscript\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-subscript\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyLeft')\" (click)=\"triggerCommand('justifyLeft')\"\n          title=\"Justify Left\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyCenter')\" (click)=\"triggerCommand('justifyCenter')\"\n          title=\"Justify Center\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-center\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyRight')\" (click)=\"triggerCommand('justifyRight')\"\n          title=\"Justify Right\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-right\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyFull')\" (click)=\"triggerCommand('justifyFull')\"\n          title=\"Justify\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('indent')\" (click)=\"triggerCommand('indent')\"\n          title=\"Indent\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-indent\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('outdent')\" (click)=\"triggerCommand('outdent')\"\n          title=\"Outdent\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-outdent\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('cut')\" (click)=\"triggerCommand('cut')\" title=\"Cut\"\n          [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-scissors\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('copy')\" (click)=\"triggerCommand('copy')\"\n          title=\"Copy\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-files-o\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('delete')\" (click)=\"triggerCommand('delete')\"\n          title=\"Delete\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('removeFormat')\" (click)=\"triggerCommand('removeFormat')\"\n          title=\"Clear Formatting\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-eraser\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('undo')\" (click)=\"triggerCommand('undo')\"\n          title=\"Undo\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-undo\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('redo')\" (click)=\"triggerCommand('redo')\"\n          title=\"Redo\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('paragraph')\" (click)=\"triggerCommand('insertParagraph')\"\n          title=\"Paragraph\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-paragraph\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('blockquote')\" (click)=\"triggerCommand('blockquote')\"\n          title=\"Blockquote\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-quote-left\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('removeBlockquote')\" (click)=\"triggerCommand('removeBlockquote')\"\n          title=\"Remove Blockquote\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-quote-right\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('horizontalLine')\" (click)=\"triggerCommand('insertHorizontalRule')\"\n          title=\"Horizontal Line\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-minus\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('orderedList')\" (click)=\"triggerCommand('insertUnorderedList')\"\n          title=\"Unodered List\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('unorderedList')\" (click)=\"triggerCommand('insertOrderedList')\"\n          title=\"Ordered List\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-list-ol\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('link')\" (click)=\"triggerCommand('link')\"\n          title=\"Insert/Edit Link\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-link\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('unlink')\" (click)=\"triggerCommand('unlink')\"\n          title=\"Unlink\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-chain-broken\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('image')\" (click)=\"clickButton()\"\n          title=\"Insert Image\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-picture-o\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .ngx-toolbar {\n      background-color: #f5f5f5;\n      font-size: 0.8rem;\n      padding: 0.2rem;\n      border: 1px solid #ddd;\n      border-bottom: transparent; }\n      .ngx-toolbar .ngx-toolbar-set {\n        display: inline-block;\n        border: 1px solid #ddd;\n        border-radius: 5px;\n        background-color: white; }\n        .ngx-toolbar .ngx-toolbar-set .ngx-editor-button {\n          background-color: #f5f5f5;\n          background-color: transparent;\n          border: 0;\n          padding: 0.4rem;\n          min-width: 2.5rem;\n          float: left;\n          border-right: 1px solid #ddd; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:hover {\n            cursor: pointer;\n            background-color: #f1f1f1;\n            -webkit-transition: 0.2s ease;\n            transition: 0.2s ease; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:focus, .ngx-toolbar .ngx-toolbar-set .ngx-editor-button.focus {\n            outline: 0; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:last-child {\n            border-right: transparent; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:first-child {\n            border-top-left-radius: 5px;\n            border-bottom-left-radius: 5px; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:last-child {\n            border-top-right-radius: 5px;\n            border-bottom-right-radius: 5px; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:disabled {\n            background-color: #f5f5f5;\n            pointer-events: none;\n            cursor: not-allowed; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'config': [{ type: Input },],\n'enableToolbar': [{ type: Input },],\n'showToolbar': [{ type: Input },],\n'execute': [{ type: Output },],\n'buttonClicked': [{ type: Output },],\n'colorElement': [{ type: ViewChild, args: ['colorElement', ] },],\n};\n}\n\nfunction NgxEditorToolbarComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorToolbarComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorToolbarComponent.ctorParameters;\n/** @type {?} */\nNgxEditorToolbarComponent.propDecorators;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.config;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.enableToolbar;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.showToolbar;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.execute;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.buttonClicked;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.colorElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// components\n\nimport { NgxEditorComponent } from './ngx-editor.component';\nimport { NgxGrippieComponent } from './ngx-grippie/ngx-grippie.component';\nimport { NgxEditorMessageComponent } from './ngx-editor-message/ngx-editor-message.component';\nimport { NgxEditorToolbarComponent } from './ngx-editor-toolbar/ngx-editor-toolbar.component';\n\n// services\n\nimport { MessageService } from './common/services/message.service';\nimport { CommandExecutorService } from './common/services/command-executor.service';\nexport class NgxEditorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxEditorComponent, NgxGrippieComponent, NgxEditorMessageComponent, NgxEditorToolbarComponent],\n  exports: [NgxEditorComponent],\n  providers: [CommandExecutorService, MessageService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxEditorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["canEnableToolbarOptions","value","toolbar","filter","array","indexOf","length","CommandExecutorService","prototype","execute","command","includes","color","split","document","execCommand","this","insertImage","createLink","imageURI","prompt","Error","selection","getSelection","anchorNode","parentElement","tagName","linkURL","getAttribute","decorators","type","Injectable","ctorParameters","MessageService","message","Subject","getMessage","asObservable","sendMessage","next","clearMessageIn","milliseconds","_this","setTimeout","undefined","ngxEditorConfig","editable","spellcheck","height","minHeight","width","minWidth","translate","placeholder","input","i","hasOwnProperty","resizer","NgxEditorComponent","_elementRef","_messageService","_commandExecutor","_renderer","config","showToolbar","enableToolbar","Utils","lastViewModel","onFocus","onDocumentClick","event","nativeElement","contains","target","onContentChange","html","onChange","onBlur","onTouched","resizeTextArea","offsetY","newHeight","parseInt","textArea","style","executeCommand","commandName","error","writeValue","refreshView","registerOnChange","fn","registerOnTouched","normalizedValue","setProperty","getCollectiveParams","ngOnInit","getEditorConfiguration","offsetHeight","Component","args","selector","template","styles","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Renderer2","propDecorators","Input","ViewChild","HostListener","NgxGrippieComponent","_editorComponent","oldY","grabber","onMouseMove","clientY","onMouseUp","onResize","preventDefault","NgxEditorMessageComponent","ngxMessage","subscribe","clearMessage","NgxEditorToolbarComponent","EventEmitter","buttonClicked","Utils.canEnableToolbarOptions","triggerCommand","emit","colorElement","click","triggerCommandColor","$event","clickButton","Output","NgxEditorModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}
