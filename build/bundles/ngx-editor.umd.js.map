{"version":3,"file":"ngx-editor.umd.js","sources":["~/ngx-editor/src/app/ngx-editor/ngx-editor.module.ts","~/ngx-editor/src/app/ngx-editor/ngx-editor-toolbar/ngx-editor-toolbar.component.ts","~/ngx-editor/src/app/ngx-editor/ngx-editor-message/ngx-editor-message.component.ts","~/ngx-editor/src/app/ngx-editor/ngx-grippie/ngx-grippie.component.ts","~/ngx-editor/src/app/ngx-editor/ngx-editor.component.ts","~/ngx-editor/src/app/ngx-editor/common/utils/ngx-editor.utils.ts","~/ngx-editor/src/app/ngx-editor/common/ngx-editor.defaults.ts","~/ngx-editor/src/app/ngx-editor/common/services/message.service.ts","~/ngx-editor/src/app/ngx-editor/common/services/command-executor.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// components\n\nimport { NgxEditorComponent } from './ngx-editor.component';\nimport { NgxGrippieComponent } from './ngx-grippie/ngx-grippie.component';\nimport { NgxEditorMessageComponent } from './ngx-editor-message/ngx-editor-message.component';\nimport { NgxEditorToolbarComponent } from './ngx-editor-toolbar/ngx-editor-toolbar.component';\n\n// services\n\nimport { MessageService } from './common/services/message.service';\nimport { CommandExecutorService } from './common/services/command-executor.service';\nexport class NgxEditorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxEditorComponent, NgxGrippieComponent, NgxEditorMessageComponent, NgxEditorToolbarComponent],\n  exports: [NgxEditorComponent],\n  providers: [CommandExecutorService, MessageService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxEditorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Input, Output, EventEmitter, ViewChild, ElementRef} from '@angular/core';\nimport * as Utils from '../common/utils/ngx-editor.utils';\nexport class NgxEditorToolbarComponent {\n\n   config: any;\n   enableToolbar = false;\n   showToolbar = true;\n   execute: EventEmitter<string> = new EventEmitter<string>();\n   buttonClicked: EventEmitter<any> = new EventEmitter<any>();\n\n  \n  colorElement: ElementRef;\nconstructor() {\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncanEnableToolbarOptions(value): boolean {\n    return Utils.canEnableToolbarOptions(value, this.config['toolbar']);\n  }\n/**\n * @param {?} command\n * @return {?}\n */\ntriggerCommand(command: string): void {\n    if (command === 'foreColor') {\n      this.colorElement.nativeElement.click();\n      return;\n    }\n    this.execute.emit(command);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\ntriggerCommandColor($event: Event) {\n    this.execute.emit('foreColor:' + ( /** @type {?} */(($event.target as any))).value);\n  }\n/**\n * @return {?}\n */\nclickButton() {\n    this.buttonClicked.emit();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-editor-toolbar',\n  template: `\n    <div class=\"ngx-toolbar\" *ngIf=\"showToolbar\">\n      <input type=\"color\" style=\"width: 0; height: 0; position: absolute; opacity: 0;\" (input)=\"triggerCommandColor($event)\" #colorElement>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('foreColor')\" (click)=\"triggerCommand('foreColor')\"\n                title=\"Bold\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-tint\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('bold')\" (click)=\"triggerCommand('bold')\"\n          title=\"Bold\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-bold\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('italic')\" (click)=\"triggerCommand('italic')\"\n          title=\"Italic\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-italic\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('underline')\" (click)=\"triggerCommand('underline')\"\n          title=\"Underline\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-underline\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('strikeThrough')\" (click)=\"triggerCommand('strikeThrough')\"\n          title=\"Strikethrough\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-strikethrough\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('superscript')\" (click)=\"triggerCommand('superscript')\"\n          title=\"Superscript\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-superscript\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('subscript')\" (click)=\"triggerCommand('subscript')\"\n          title=\"Subscript\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-subscript\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyLeft')\" (click)=\"triggerCommand('justifyLeft')\"\n          title=\"Justify Left\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyCenter')\" (click)=\"triggerCommand('justifyCenter')\"\n          title=\"Justify Center\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-center\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyRight')\" (click)=\"triggerCommand('justifyRight')\"\n          title=\"Justify Right\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-right\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyFull')\" (click)=\"triggerCommand('justifyFull')\"\n          title=\"Justify\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('indent')\" (click)=\"triggerCommand('indent')\"\n          title=\"Indent\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-indent\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('outdent')\" (click)=\"triggerCommand('outdent')\"\n          title=\"Outdent\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-outdent\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('cut')\" (click)=\"triggerCommand('cut')\" title=\"Cut\"\n          [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-scissors\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('copy')\" (click)=\"triggerCommand('copy')\"\n          title=\"Copy\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-files-o\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('delete')\" (click)=\"triggerCommand('delete')\"\n          title=\"Delete\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('removeFormat')\" (click)=\"triggerCommand('removeFormat')\"\n          title=\"Clear Formatting\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-eraser\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('undo')\" (click)=\"triggerCommand('undo')\"\n          title=\"Undo\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-undo\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('redo')\" (click)=\"triggerCommand('redo')\"\n          title=\"Redo\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('paragraph')\" (click)=\"triggerCommand('insertParagraph')\"\n          title=\"Paragraph\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-paragraph\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('blockquote')\" (click)=\"triggerCommand('blockquote')\"\n          title=\"Blockquote\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-quote-left\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('removeBlockquote')\" (click)=\"triggerCommand('removeBlockquote')\"\n          title=\"Remove Blockquote\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-quote-right\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('horizontalLine')\" (click)=\"triggerCommand('insertHorizontalRule')\"\n          title=\"Horizontal Line\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-minus\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('orderedList')\" (click)=\"triggerCommand('insertUnorderedList')\"\n          title=\"Unodered List\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('unorderedList')\" (click)=\"triggerCommand('insertOrderedList')\"\n          title=\"Ordered List\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-list-ol\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n      <div class=\"ngx-toolbar-set\">\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('link')\" (click)=\"triggerCommand('link')\"\n          title=\"Insert/Edit Link\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-link\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('unlink')\" (click)=\"triggerCommand('unlink')\"\n          title=\"Unlink\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-chain-broken\" aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('image')\" (click)=\"clickButton()\"\n          title=\"Insert Image\" [disabled]=\"!enableToolbar\">\n          <i class=\"fa fa-picture-o\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .ngx-toolbar {\n      background-color: #f5f5f5;\n      font-size: 0.8rem;\n      padding: 0.2rem;\n      border: 1px solid #ddd;\n      border-bottom: transparent; }\n      .ngx-toolbar .ngx-toolbar-set {\n        display: inline-block;\n        border: 1px solid #ddd;\n        border-radius: 5px;\n        background-color: white; }\n        .ngx-toolbar .ngx-toolbar-set .ngx-editor-button {\n          background-color: #f5f5f5;\n          background-color: transparent;\n          border: 0;\n          padding: 0.4rem;\n          min-width: 2.5rem;\n          float: left;\n          border-right: 1px solid #ddd; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:hover {\n            cursor: pointer;\n            background-color: #f1f1f1;\n            -webkit-transition: 0.2s ease;\n            transition: 0.2s ease; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:focus, .ngx-toolbar .ngx-toolbar-set .ngx-editor-button.focus {\n            outline: 0; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:last-child {\n            border-right: transparent; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:first-child {\n            border-top-left-radius: 5px;\n            border-bottom-left-radius: 5px; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:last-child {\n            border-top-right-radius: 5px;\n            border-bottom-right-radius: 5px; }\n          .ngx-toolbar .ngx-toolbar-set .ngx-editor-button:disabled {\n            background-color: #f5f5f5;\n            pointer-events: none;\n            cursor: not-allowed; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'config': [{ type: Input },],\n'enableToolbar': [{ type: Input },],\n'showToolbar': [{ type: Input },],\n'execute': [{ type: Output },],\n'buttonClicked': [{ type: Output },],\n'colorElement': [{ type: ViewChild, args: ['colorElement', ] },],\n};\n}\n\nfunction NgxEditorToolbarComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorToolbarComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorToolbarComponent.ctorParameters;\n/** @type {?} */\nNgxEditorToolbarComponent.propDecorators;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.config;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.enableToolbar;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.showToolbar;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.execute;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.buttonClicked;\n/** @type {?} */\nNgxEditorToolbarComponent.prototype.colorElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\n\nimport { MessageService } from '../common/services/message.service';\nexport class NgxEditorMessageComponent {\n\n  ngxMessage = '';\n/**\n * @param {?} _messageService\n */\nconstructor(private _messageService: MessageService) {\n    this._messageService.getMessage().subscribe((message: string) => this.ngxMessage = message);\n  }\n/**\n * @return {?}\n */\nclearMessage() {\n    this.ngxMessage = undefined;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-editor-message',\n  template: `\n    <div class=\"ngx-editor-message\" *ngIf=\"ngxMessage\" (dblclick)=\"clearMessage()\">\n      {{ ngxMessage }}\n    </div>\n  `,\n  styles: [`\n    .ngx-editor-message {\n      font-size: 80%;\n      background-color: #f1f1f1;\n      border: 1px solid #ddd;\n      border-top: transparent;\n      padding: 0 0.5rem;\n      padding-bottom: 0.1rem;\n      -webkit-transition: 0.5s ease-in;\n      transition: 0.5s ease-in; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MessageService, },\n];\n}\n\nfunction NgxEditorMessageComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorMessageComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorMessageComponent.ctorParameters;\n/** @type {?} */\nNgxEditorMessageComponent.prototype.ngxMessage;\n/** @type {?} */\nNgxEditorMessageComponent.prototype._messageService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, HostListener } from '@angular/core';\nimport { NgxEditorComponent } from '../ngx-editor.component';\nexport class NgxGrippieComponent {\n\n  height: number;\n  oldY = 0;\n  grabber = false;\n/**\n * @param {?} _editorComponent\n */\nconstructor(private _editorComponent: NgxEditorComponent) { }\n/**\n * @param {?} event\n * @return {?}\n */\nonMouseMove(event: MouseEvent) {\n\n    if (!this.grabber) {\n      return;\n    }\n\n    this._editorComponent.resizeTextArea(event.clientY - this.oldY);\n    this.oldY = event.clientY;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonMouseUp(event: MouseEvent) {\n    this.grabber = false;\n  }\n/**\n * @param {?} event\n * @param {?=} resizer\n * @return {?}\n */\nonResize(event: MouseEvent, resizer?: Function) {\n    this.grabber = true;\n    this.oldY = event.clientY;\n    event.preventDefault();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-grippie',\n  template: `\n    <div class=\"ngx-editor-grippie\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"isolation:isolate\" viewBox=\"651.6 235 26 5\"\n        width=\"26\" height=\"5\">\n        <g id=\"sprites\">\n          <path d=\" M 651.6 235 L 653.6 235 L 653.6 237 L 651.6 237 M 654.6 238 L 656.6 238 L 656.6 240 L 654.6 240 M 660.6 238 L 662.6 238 L 662.6 240 L 660.6 240 M 666.6 238 L 668.6 238 L 668.6 240 L 666.6 240 M 672.6 238 L 674.6 238 L 674.6 240 L 672.6 240 M 657.6 235 L 659.6 235 L 659.6 237 L 657.6 237 M 663.6 235 L 665.6 235 L 665.6 237 L 663.6 237 M 669.6 235 L 671.6 235 L 671.6 237 L 669.6 237 M 675.6 235 L 677.6 235 L 677.6 237 L 675.6 237\"\n            fill=\"rgb(147,153,159)\" />\n        </g>\n      </svg>\n    </div>\n  `,\n  styles: [`\n    .ngx-editor-grippie {\n      height: 9px;\n      background-color: #f1f1f1;\n      position: relative;\n      text-align: center;\n      cursor: s-resize;\n      border: 1px solid #ddd;\n      border-top: transparent; }\n      .ngx-editor-grippie svg {\n        position: absolute;\n        top: 1.5px;\n        width: 50%;\n        right: 25%; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgxEditorComponent, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onMouseMove': [{ type: HostListener, args: ['document:mousemove', ['$event'], ] },],\n'onMouseUp': [{ type: HostListener, args: ['document:mouseup', ['$event'], ] },],\n'onResize': [{ type: HostListener, args: ['mousedown', ['$event'], ] },],\n};\n}\n\nfunction NgxGrippieComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxGrippieComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxGrippieComponent.ctorParameters;\n/** @type {?} */\nNgxGrippieComponent.propDecorators;\n/** @type {?} */\nNgxGrippieComponent.prototype.height;\n/** @type {?} */\nNgxGrippieComponent.prototype.oldY;\n/** @type {?} */\nNgxGrippieComponent.prototype.grabber;\n/** @type {?} */\nNgxGrippieComponent.prototype._editorComponent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component, OnInit, Input, Output,\n  ViewChild, HostListener, ElementRef, EventEmitter,\n  Renderer2, forwardRef\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nimport {CommandExecutorService} from './common/services/command-executor.service';\nimport {MessageService} from './common/services/message.service';\n\nimport {ngxEditorConfig} from './common/ngx-editor.defaults';\nimport * as Utils from './common/utils/ngx-editor.utils';\nexport class NgxEditorComponent implements OnInit, ControlValueAccessor {\n\n   editable: boolean;\n   spellcheck: boolean;\n   placeholder: string;\n   translate: string;\n   height: string;\n   minHeight: string;\n   width: string;\n   minWidth: string;\n   toolbar: any;\n   resizer = 'stack';\n   config = ngxEditorConfig;\n   showToolbar = true;\n   buttonClickedParent: EventEmitter<any> = new EventEmitter<any>();\n\n   textArea: any;\n\n  enableToolbar = false;\n  Utils = Utils;\nprivate lastViewModel: any = '';\nprivate onChange: (value: string) => void;\nprivate onTouched: () => void;\n/**\n * @param {?} _elementRef\n * @param {?} _messageService\n * @param {?} _commandExecutor\n * @param {?} _renderer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _messageService: MessageService,\nprivate _commandExecutor: CommandExecutorService,\nprivate _renderer: Renderer2) {\n  }\n/**\n * @return {?}\n */\nonFocus(): void {\n    this.enableToolbar = true;\n    return;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonDocumentClick(event) {\n    this.enableToolbar = !!this._elementRef.nativeElement.contains(event.target);\n  }\n/**\n * @param {?} html\n * @return {?}\n */\nonContentChange(html): void {\n\n    if (typeof this.onChange === 'function') {\n      this.onChange(html);\n    }\n\n    return;\n  }\n/**\n * @return {?}\n */\nonBlur(): void {\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n\n    return;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nresizeTextArea(offsetY: number): void {\n    let /** @type {?} */ newHeight = parseInt(this.height, 10);\n    newHeight += offsetY;\n    this.height = newHeight + 'px';\n    this.textArea.nativeElement.style.height = this.height;\n    return;\n  }\n/**\n * @param {?} commandName\n * @return {?}\n */\nexecuteCommand(commandName: string): void {\n    try {\n      this._commandExecutor.execute(commandName);\n    } catch ( /** @type {?} */error) {\n      this._messageService.sendMessage(error.message);\n    }\n    return;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (value === undefined) {\n      return;\n    }\n\n    this.refreshView(value);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nrefreshView(value): void {\n    const /** @type {?} */ normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n    return;\n  }\n/**\n * @return {?}\n */\ngetCollectiveParams(): any {\n    return {\n      editable: this.editable,\n      spellcheck: this.spellcheck,\n      placeholder: this.placeholder,\n      translate: this.translate,\n      height: this.height,\n      minHeight: this.minHeight,\n      width: this.width,\n      minWidth: this.minWidth,\n      toolbar: this.toolbar\n    };\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // set configuartion\n    this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\n\n    this.height = this.height || this.textArea.nativeElement.offsetHeight;\n\n    this.executeCommand('enableObjectResizing');\n  }\n/**\n * @return {?}\n */\nclickButtonParent() {\n    this.buttonClickedParent.emit();\n\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-ngx-editor',\n  template: `\n    <div class=\"ngx-editor\" id=\"ngxEditor\" [style.width]=\"config['width']\" [style.minWidth]=\"config['minWidth']\">\n\n      <app-ngx-editor-toolbar [config]=\"config\" [enableToolbar]=\"enableToolbar\" [showToolbar]=\"showToolbar\"\n                              (buttonClicked)=\"clickButtonParent()\"\n                              (execute)=\"executeCommand($event)\"></app-ngx-editor-toolbar>\n\n      <!-- text area -->\n      <div class=\"ngx-editor-textarea\" [attr.contenteditable]=\"config['editable']\"\n           [attr.placeholder]=\"config['placeholder']\" (input)=\"onContentChange($event.target.innerHTML)\"\n           [attr.translate]=\"config['translate']\" [attr.spellcheck]=\"config['spellcheck']\" [style.height]=\"config['height']\"\n           [style.minHeight]=\"config['minHeight']\"\n           [style.resize]=\"Utils?.canResize(resizer)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" #ngxTextArea></div>\n\n      <app-ngx-editor-message></app-ngx-editor-message>\n\n      <app-ngx-grippie *ngIf=\"resizer === 'stack'\"></app-ngx-grippie>\n\n    </div>\n  `,\n  styles: [`\n    /*\n     * editor styles\n     */\n    .ngx-editor {\n      position: relative; }\n      .ngx-editor ::ng-deep [contenteditable=true]:empty:before {\n        content: attr(placeholder);\n        display: block;\n        color: #868e96;\n        opacity: 1; }\n      .ngx-editor .ngx-editor-textarea {\n        min-height: 5rem;\n        padding: 0.5rem 0.8rem 1rem 0.8rem;\n        border: 1px solid #ddd;\n        background-color: #fff;\n        overflow-x: hidden;\n        overflow-y: auto; }\n        .ngx-editor .ngx-editor-textarea:focus, .ngx-editor .ngx-editor-textarea.focus {\n          outline: 0; }\n        .ngx-editor .ngx-editor-textarea ::ng-deep blockquote {\n          margin-left: 1rem;\n          border-left: 0.2em solid #dfe2e5;\n          padding-left: 0.5rem; }\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxEditorComponent),\n      multi: true\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MessageService, },\n{type: CommandExecutorService, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'editable': [{ type: Input },],\n'spellcheck': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'translate': [{ type: Input },],\n'height': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'width': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'toolbar': [{ type: Input },],\n'resizer': [{ type: Input },],\n'config': [{ type: Input },],\n'showToolbar': [{ type: Input },],\n'buttonClickedParent': [{ type: Output },],\n'textArea': [{ type: ViewChild, args: ['ngxTextArea', ] },],\n'onDocumentClick': [{ type: HostListener, args: ['document:click', ['$event'], ] },],\n};\n}\n\nfunction NgxEditorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxEditorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxEditorComponent.ctorParameters;\n/** @type {?} */\nNgxEditorComponent.propDecorators;\n/** @type {?} */\nNgxEditorComponent.prototype.editable;\n/** @type {?} */\nNgxEditorComponent.prototype.spellcheck;\n/** @type {?} */\nNgxEditorComponent.prototype.placeholder;\n/** @type {?} */\nNgxEditorComponent.prototype.translate;\n/** @type {?} */\nNgxEditorComponent.prototype.height;\n/** @type {?} */\nNgxEditorComponent.prototype.minHeight;\n/** @type {?} */\nNgxEditorComponent.prototype.width;\n/** @type {?} */\nNgxEditorComponent.prototype.minWidth;\n/** @type {?} */\nNgxEditorComponent.prototype.toolbar;\n/** @type {?} */\nNgxEditorComponent.prototype.resizer;\n/** @type {?} */\nNgxEditorComponent.prototype.config;\n/** @type {?} */\nNgxEditorComponent.prototype.showToolbar;\n/** @type {?} */\nNgxEditorComponent.prototype.buttonClickedParent;\n/** @type {?} */\nNgxEditorComponent.prototype.textArea;\n/** @type {?} */\nNgxEditorComponent.prototype.enableToolbar;\n/** @type {?} */\nNgxEditorComponent.prototype.Utils;\n/** @type {?} */\nNgxEditorComponent.prototype.lastViewModel;\n/** @type {?} */\nNgxEditorComponent.prototype.onChange;\n/** @type {?} */\nNgxEditorComponent.prototype.onTouched;\n/** @type {?} */\nNgxEditorComponent.prototype._elementRef;\n/** @type {?} */\nNgxEditorComponent.prototype._messageService;\n/** @type {?} */\nNgxEditorComponent.prototype._commandExecutor;\n/** @type {?} */\nNgxEditorComponent.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * @param {?} value\n * @param {?} toolbar\n * @return {?}\n */\nexport function canEnableToolbarOptions(value: string, toolbar: any): boolean {\n\n    if (value) {\n\n        if (toolbar['length'] === 0) {\n            return true;\n        } else {\n\n            const /** @type {?} */ found = toolbar.filter(array => {\n                return array.indexOf(value) !== -1;\n            });\n\n            return found.length ? true : false;\n        }\n    } else {\n        return false;\n    }\n}\n/**\n * @param {?} value\n * @param {?} ngxEditorConfig\n * @param {?} input\n * @return {?}\n */\nexport function getEditorConfiguration(value, ngxEditorConfig, input): any {\n\n    for (const /** @type {?} */ i in ngxEditorConfig) {\n        if (i) {\n            if (input[i]) {\n                value[i] = input[i];\n            }\n            if (!value.hasOwnProperty(i)) {\n                value[i] = ngxEditorConfig[i];\n            }\n        }\n    }\n    return value;\n}\n/**\n * @param {?} resizer\n * @return {?}\n */\nexport function canResize(resizer: string): any {\n    if (resizer === 'basic') {\n        return 'vertical';\n    }\n    return false;\n}\n","export const /** @type {?} */ ngxEditorConfig = {\n    editable: true,\n    spellcheck: true,\n    height: 'auto',\n    minHeight: '0',\n    width: 'auto',\n    minWidth: '0',\n    translate: 'yes',\n    placeholder: 'Enter text here...',\n    toolbar: [\n        ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript', 'foreColor'],\n        ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\n        ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\n        ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\n        ['link', 'unlink', 'image']\n    ]\n};\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\n\nconst /** @type {?} */ FIVE_SECONDS = 5000;\nexport class MessageService {\nprivate message: Subject<string> = new Subject();\nconstructor() { }\n/**\n * @return {?}\n */\ngetMessage(): Observable<string> {\n    return this.message.asObservable();\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nsendMessage(message: string): void {\n    this.message.next(message);\n    this.clearMessageIn(FIVE_SECONDS);\n    return;\n  }\n/**\n * @param {?} milliseconds\n * @return {?}\n */\nprivate clearMessageIn(milliseconds: number): void {\n    setTimeout(() => {\n      this.message.next(undefined);\n    }, milliseconds);\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MessageService_tsickle_Closure_declarations() {\n/** @type {?} */\nMessageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMessageService.ctorParameters;\n/** @type {?} */\nMessageService.prototype.message;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport class CommandExecutorService {\n/**\n * @param {?} command\n * @return {?}\n */\nexecute(command: string): void {\n\n    if (command === 'enableObjectResizing') {\n      document.execCommand('enableObjectResizing', true, true);\n      return;\n    }\n\n    if (command === 'blockquote') {\n      document.execCommand('formatBlock', false, '<blockquote>');\n      return;\n    }\n\n    if (command === 'removeBlockquote') {\n      document.execCommand('formatBlock', false, 'div');\n      return;\n    }\n\n    if (command === 'link') {\n      this.createLink();\n      return;\n    }\n\n    if (command === 'image') {\n      this.insertImage();\n      return;\n    }\n\n    if (command.includes('foreColor')) {\n      const /** @type {?} */ color = command.split(':')[1];\n      document.execCommand('foreColor', false, color);\n      return;\n    }\n\n    document.execCommand(command, false, null);\n  }\n/**\n * @return {?}\n */\nprivate insertImage(): void {\n    const /** @type {?} */ imageURI = prompt('Enter Image URL', 'http://');\n    if (imageURI) {\n      const /** @type {?} */ inserted = document.execCommand('insertImage', false, imageURI);\n      if (!inserted) {\n        throw new Error('Invalid URL');\n      }\n    }\n    return;\n  }\n/**\n * @return {?}\n */\nprivate createLink(): void {\n    const /** @type {?} */ selection = document.getSelection();\n\n    if (selection.anchorNode.parentElement.tagName === 'A') {\n      const /** @type {?} */ linkURL = prompt('Enter URL', selection.anchorNode.parentElement.getAttribute('href'));\n      if (linkURL) {\n        document.execCommand('createLink', false, linkURL);\n      }\n    } else {\n      if (selection['type'] === 'None') {\n        throw new Error('No selection made');\n      } else {\n        const /** @type {?} */ linkURL = prompt('Enter URL', 'http://');\n        if (linkURL) {\n          document.execCommand('createLink', false, linkURL);\n        }\n      }\n    }\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CommandExecutorService_tsickle_Closure_declarations() {\n/** @type {?} */\nCommandExecutorService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommandExecutorService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","ViewChild","Output","Input","Component","Utils.canEnableToolbarOptions","EventEmitter","HostListener","Renderer2","ElementRef","forwardRef","NG_VALUE_ACCESSOR","Injectable","Subject"],"mappings":"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"}
